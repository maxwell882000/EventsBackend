// <auto-generated />
using System;
using EventsBookingBackend.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventsBookingBackend.Migrations.Booking
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20240830122543_MigrateAll")]
    partial class MigrateAll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bookings")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BookingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_type_id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("BookingTypeId")
                        .HasDatabaseName("ix_bookings_booking_type_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_bookings_is_deleted");

                    b.ToTable("bookings", "bookings");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.BookingOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_booking_options");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_options_is_deleted");

                    b.ToTable("booking_options", "bookings");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.BookingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_booking_types");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_types_is_deleted");

                    b.ToTable("booking_types", "bookings");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.BookingUserOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("option_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_booking_user_options");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_booking_user_options_booking_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_booking_user_options_is_deleted");

                    b.HasIndex("OptionId")
                        .HasDatabaseName("ix_booking_user_options_option_id");

                    b.ToTable("booking_user_options", "bookings");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.Booking", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Booking.Entities.BookingType", "BookingType")
                        .WithMany()
                        .HasForeignKey("BookingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_booking_types_booking_type_id");

                    b.Navigation("BookingType");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.BookingOption", b =>
                {
                    b.OwnsMany("EventsBookingBackend.Domain.Booking.ValueObjects.BookingOptionValue", "BookingOptionValues", b1 =>
                        {
                            b1.Property<Guid>("BookingOptionId")
                                .HasColumnType("uuid")
                                .HasColumnName("booking_option_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("BookingOptionId", "Id")
                                .HasName("pk_booking_options_booking_option_values");

                            b1.ToTable("booking_options_booking_option_values", "bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingOptionId")
                                .HasConstraintName("fk_booking_options_booking_option_values_booking_options_booki");
                        });

                    b.Navigation("BookingOptionValues");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.BookingUserOption", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Booking.Entities.Booking", null)
                        .WithMany("BookingOptions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_user_options_bookings_booking_id");

                    b.HasOne("EventsBookingBackend.Domain.Booking.Entities.BookingOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_user_options_booking_options_option_id");

                    b.OwnsOne("EventsBookingBackend.Domain.Booking.ValueObjects.BookingOptionValue", "BookingOptionValue", b1 =>
                        {
                            b1.Property<Guid>("BookingUserOptionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("booking_option_value_value");

                            b1.HasKey("BookingUserOptionId");

                            b1.ToTable("booking_user_options", "bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingUserOptionId")
                                .HasConstraintName("fk_booking_user_options_booking_user_options_id");
                        });

                    b.Navigation("BookingOptionValue");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Booking.Entities.Booking", b =>
                {
                    b.Navigation("BookingOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
