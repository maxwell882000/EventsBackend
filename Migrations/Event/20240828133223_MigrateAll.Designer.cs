// <auto-generated />
using System;
using EventsBookingBackend.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventsBookingBackend.Migrations.Event
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20240828133223_MigrateAll")]
    partial class MigrateAll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("events")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_events_is_deleted");

                    b.ToTable("events", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_liked_events");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_liked_events_event_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_liked_events_is_deleted");

                    b.ToTable("liked_events", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.OwnsMany("EventsBookingBackend.Domain.Common.ValueObjects.FileValueObject", "Images", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("event_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");

                            b1.HasKey("EventId", "Id")
                                .HasName("pk_events_images");

                            b1.ToTable("events_images", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_images_events_event_id");
                        });

                    b.OwnsOne("EventsBookingBackend.Domain.Common.ValueObjects.FileValueObject", "PreviewImage", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("preview_image_path");

                            b1.HasKey("EventId");

                            b1.ToTable("events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_events_id");
                        });

                    b.OwnsOne("EventsBookingBackend.Domain.Event.ValueObjects.Building", "Building", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("building_address");

                            b1.HasKey("EventId");

                            b1.ToTable("events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_events_id");

                            b1.OwnsOne("EventsBookingBackend.Domain.Event.ValueObjects.LatLong", "LatLong", b2 =>
                                {
                                    b2.Property<Guid>("BuildingEventId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<float>("Latitude")
                                        .HasColumnType("real")
                                        .HasColumnName("building_lat_long_latitude");

                                    b2.Property<float>("Longitude")
                                        .HasColumnType("real")
                                        .HasColumnName("building_lat_long_longitude");

                                    b2.HasKey("BuildingEventId");

                                    b2.ToTable("events", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("BuildingEventId")
                                        .HasConstraintName("fk_events_events_id");
                                });

                            b1.OwnsMany("EventsBookingBackend.Domain.Event.ValueObjects.WorkTime", "WorkHours", b2 =>
                                {
                                    b2.Property<Guid>("BuildingEventId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("building_event_id");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("Day")
                                        .HasColumnType("integer")
                                        .HasColumnName("day");

                                    b2.Property<int>("FromHour")
                                        .HasColumnType("integer")
                                        .HasColumnName("from_hour");

                                    b2.Property<int>("ToHour")
                                        .HasColumnType("integer")
                                        .HasColumnName("to_hour");

                                    b2.HasKey("BuildingEventId", "Id")
                                        .HasName("pk_work_hour");

                                    b2.ToTable("work_hour", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("BuildingEventId")
                                        .HasConstraintName("fk_work_hour_events_building_event_id");
                                });

                            b1.Navigation("LatLong")
                                .IsRequired();

                            b1.Navigation("WorkHours");
                        });

                    b.Navigation("Building")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("PreviewImage")
                        .IsRequired();
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.Entities.Event", "Event")
                        .WithMany("LikedEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liked_events_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Navigation("LikedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
