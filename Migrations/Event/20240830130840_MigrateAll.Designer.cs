// <auto-generated />
using System;
using EventsBookingBackend.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventsBookingBackend.Migrations.Event
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20240830130840_MigrateAll")]
    partial class MigrateAll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("events")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_events_is_deleted");

                    b.ToTable("events", "events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                            CategoryId = new Guid("48c112b1-70f5-4270-8f75-98c74bc48d96"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ташгрэс поле",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                            CategoryId = new Guid("48c112b1-70f5-4270-8f75-98c74bc48d96"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "225 школа поле",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                            CategoryId = new Guid("48c112b1-70f5-4270-8f75-98c74bc48d96"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "МВЭС поле",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                            CategoryId = new Guid("48c112b1-70f5-4270-8f75-98c74bc48d96"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Эко парк поле",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.EventAggregatedReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<float>("OverallMark")
                        .HasColumnType("real")
                        .HasColumnName("overall_mark");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer")
                        .HasColumnName("review_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_event_aggregated_reviews");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasDatabaseName("ix_event_aggregated_reviews_event_id");

                    b.ToTable("event_aggregated_reviews", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_liked_events");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_liked_events_event_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_liked_events_is_deleted");

                    b.ToTable("liked_events", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.OwnsMany("EventsBookingBackend.Domain.Common.ValueObjects.FileValueObject", "Images", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("event_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");

                            b1.HasKey("EventId", "Id")
                                .HasName("pk_events_images");

                            b1.ToTable("events_images", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_images_events_event_id");

                            b1.HasData(
                                new
                                {
                                    EventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                    Id = 1,
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                    Id = 2,
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                    Id = 3,
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                    Id = 4,
                                    Path = "media/preview.png"
                                });
                        });

                    b.OwnsOne("EventsBookingBackend.Domain.Common.ValueObjects.FileValueObject", "PreviewImage", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("preview_image_path");

                            b1.HasKey("EventId");

                            b1.ToTable("events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_events_id");

                            b1.HasData(
                                new
                                {
                                    EventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                    Path = "media/preview.png"
                                },
                                new
                                {
                                    EventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                    Path = "media/preview.png"
                                });
                        });

                    b.OwnsOne("EventsBookingBackend.Domain.Event.ValueObjects.Building", "Building", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("building_address");

                            b1.HasKey("EventId");

                            b1.ToTable("events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_events_id");

                            b1.OwnsOne("EventsBookingBackend.Domain.Event.ValueObjects.LatLong", "LatLong", b2 =>
                                {
                                    b2.Property<Guid>("BuildingEventId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("building_lat_long_latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision")
                                        .HasColumnName("building_lat_long_longitude");

                                    b2.HasKey("BuildingEventId");

                                    b2.ToTable("events", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("BuildingEventId")
                                        .HasConstraintName("fk_events_events_id");

                                    b2.HasData(
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Latitude = 41.353098000000003,
                                            Longitude = 69.336008000000007
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Latitude = 41.331662999999999,
                                            Longitude = 69.328024999999997
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Latitude = 41.332619000000001,
                                            Longitude = 69.329982000000001
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Latitude = 41.309570000000001,
                                            Longitude = 69.295299999999997
                                        });
                                });

                            b1.OwnsMany("EventsBookingBackend.Domain.Event.ValueObjects.WorkHour", "WorkHours", b2 =>
                                {
                                    b2.Property<Guid>("BuildingEventId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("building_event_id");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("Day")
                                        .HasColumnType("integer")
                                        .HasColumnName("day");

                                    b2.Property<int>("FromHour")
                                        .HasColumnType("integer")
                                        .HasColumnName("from_hour");

                                    b2.Property<int>("ToHour")
                                        .HasColumnType("integer")
                                        .HasColumnName("to_hour");

                                    b2.HasKey("BuildingEventId", "Id")
                                        .HasName("pk_work_hour");

                                    b2.ToTable("work_hour", "events");

                                    b2.WithOwner()
                                        .HasForeignKey("BuildingEventId")
                                        .HasConstraintName("fk_work_hour_events_building_event_id");

                                    b2.HasData(
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 1,
                                            Day = 1,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 3,
                                            Day = 3,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 2,
                                            Day = 2,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 5,
                                            Day = 5,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 6,
                                            Day = 6,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 4,
                                            Day = 4,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                            Id = 7,
                                            Day = 0,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 8,
                                            Day = 1,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 9,
                                            Day = 2,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 10,
                                            Day = 3,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 11,
                                            Day = 4,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 12,
                                            Day = 5,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 13,
                                            Day = 6,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                            Id = 14,
                                            Day = 0,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 15,
                                            Day = 1,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 16,
                                            Day = 2,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 17,
                                            Day = 3,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 19,
                                            Day = 5,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 20,
                                            Day = 6,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 18,
                                            Day = 4,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                            Id = 21,
                                            Day = 0,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 22,
                                            Day = 1,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 23,
                                            Day = 2,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 24,
                                            Day = 3,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 25,
                                            Day = 4,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 26,
                                            Day = 5,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 27,
                                            Day = 6,
                                            FromHour = 10,
                                            ToHour = 23
                                        },
                                        new
                                        {
                                            BuildingEventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                            Id = 28,
                                            Day = 0,
                                            FromHour = 10,
                                            ToHour = 23
                                        });
                                });

                            b1.Navigation("LatLong")
                                .IsRequired();

                            b1.Navigation("WorkHours");

                            b1.HasData(
                                new
                                {
                                    EventId = new Guid("381b572f-1014-458d-9220-9aa92814c991"),
                                    Address = "микрорайон ТашГРЭС, 37"
                                },
                                new
                                {
                                    EventId = new Guid("c57330ee-81e3-40c4-b0e6-8fe788632e8e"),
                                    Address = "улица Каландар, 5"
                                },
                                new
                                {
                                    EventId = new Guid("fe7e7d70-46ba-4f8e-893c-d2314c06b1cf"),
                                    Address = "ул. Мирзо Улугбека, 8А"
                                },
                                new
                                {
                                    EventId = new Guid("15f67450-ee32-4845-abe1-a7a13f43b006"),
                                    Address = "Ташкентский центральный экопарк имени Захириддина Мухаммада Бабура"
                                });
                        });

                    b.OwnsOne("EventsBookingBackend.Domain.Event.ValueObjects.EventState", "State", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("IsActive")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(true)
                                .HasColumnName("state_is_active");

                            b1.Property<bool>("IsReservable")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("state_is_reservable");

                            b1.HasKey("EventId");

                            b1.ToTable("events", "events");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_events_events_id");
                        });

                    b.Navigation("Building")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("PreviewImage")
                        .IsRequired();

                    b.Navigation("State")
                        .IsRequired();
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.EventAggregatedReview", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.Entities.Event", "Event")
                        .WithOne("AggregatedReviews")
                        .HasForeignKey("EventsBookingBackend.Domain.Event.Entities.EventAggregatedReview", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_aggregated_reviews_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.Entities.Event", "Event")
                        .WithMany("LikedEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liked_events_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Navigation("AggregatedReviews");

                    b.Navigation("LikedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
