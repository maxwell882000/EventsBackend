// <auto-generated />
using System;
using EventsBookingBackend.Infrastructure.EntityFramework.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventsBookingBackend.Migrations.Event
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("events")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_events_building_id");

                    b.ToTable("events", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_liked_events");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_liked_events_event_id");

                    b.ToTable("liked_events", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("LatLongId")
                        .HasColumnType("integer")
                        .HasColumnName("lat_long_id");

                    b.HasKey("Id")
                        .HasName("pk_building");

                    b.HasIndex("LatLongId")
                        .HasDatabaseName("ix_building_lat_long_id");

                    b.ToTable("building", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.LatLong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Latitude")
                        .HasColumnType("real")
                        .HasColumnName("latitude");

                    b.Property<float>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude");

                    b.HasKey("Id")
                        .HasName("pk_lat_long");

                    b.ToTable("lat_long", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.WorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<int>("FromHour")
                        .HasColumnType("integer")
                        .HasColumnName("from_hour");

                    b.Property<int>("ToHour")
                        .HasColumnType("integer")
                        .HasColumnName("to_hour");

                    b.HasKey("Id")
                        .HasName("pk_work_hour");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_work_hour_building_id");

                    b.ToTable("work_hour", "events");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.ValueObjects.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_building_building_id");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.LikedEvent", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.Entities.Event", "Event")
                        .WithMany("LikedEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liked_events_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.Building", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.ValueObjects.LatLong", "LatLong")
                        .WithMany()
                        .HasForeignKey("LatLongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_building_lat_long_lat_long_id");

                    b.Navigation("LatLong");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.WorkHour", b =>
                {
                    b.HasOne("EventsBookingBackend.Domain.Event.ValueObjects.Building", null)
                        .WithMany("WorkHours")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_work_hour_building_building_id");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.Entities.Event", b =>
                {
                    b.Navigation("LikedEvents");
                });

            modelBuilder.Entity("EventsBookingBackend.Domain.Event.ValueObjects.Building", b =>
                {
                    b.Navigation("WorkHours");
                });
#pragma warning restore 612, 618
        }
    }
}
